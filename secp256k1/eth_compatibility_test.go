package secp256k1

import (
	//"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/crypto/secp256k1"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

// this function tests whether our library can verify an ECDSA signature
// generated by go-ethereum.
func TestSignature_ShouldVerifyEthereumSignature(t *testing.T) {
	kp := GenerateKeypair()

	msg := [32]byte{1, 2, 3}
	priv, err := kp.private.Encode()
	require.NoError(t, err)
	ethSig, err := secp256k1.Sign(msg[:], priv)
	require.NoError(t, err)

	newSig := &Signature{}
	err = newSig.Decode(ethSig)
	require.NoError(t, err)
	ok, err := kp.Public().Verify(msg[:], newSig)
	require.NoError(t, err)
	assert.True(t, ok)

	pubKey, err := kp.Public().Encode()
	require.NoError(t, err)
	require.Equal(t, 33, len(pubKey))

	ok = secp256k1.VerifySignature(pubKey, msg[:], ethSig[:64])
	require.True(t, ok)
}

// this function tests whether go-ethereum can verify an ECDSA signature
// generated by this library.
func TestSignature_ShouldBeVerifiedByEthereum(t *testing.T) {
	kp := GenerateKeypair()

	msg := [32]byte{1, 2, 3}
	sig, err := kp.AdaptorSign(msg[:])
	require.NoError(t, err)

	ok, err := kp.Public().VerifyAdaptor(msg[:], sig.AdaptorWithSecret.EncryptionKey(),
		sig.AdaptorWithSecret.adaptor)
	require.NoError(t, err)
	require.True(t, ok)

	encSig, err := sig.Signature.Encode()
	require.NoError(t, err)
	require.Equal(t, 64, len(encSig))
	pubKey, err := kp.Public().Encode()
	require.NoError(t, err)
	require.Equal(t, 33, len(pubKey))

	// ethPub, err := crypto.DecompressPubkey(pubKey)
	// require.NoError(t, err)
	// publicKeyBytes := crypto.FromECDSAPub(ethPub)
	// t.Log(pubKey)
	// t.Log(publicKeyBytes)

	msg = [32]byte{1, 2, 3}
	verified := secp256k1.VerifySignature(pubKey, msg[:], encSig[:])
	assert.True(t, verified)
}
